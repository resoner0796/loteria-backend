const express = require('express');
const http = require('http');
const cors = require('cors');
const { Server } = require('socket.io');

const app = express();
const server = http.createServer(app);

const io = new Server(server, {
Â  cors: {
Â  Â  origin: "https://resoner0796.github.io",
Â  Â  methods: ["GET", "POST"]
Â  }
});

// Estado global por sala
const salas = {};

function generarBarajitas() {
Â  const total = 54;
Â  const barajas = Array.from({ length: total }, (_, i) => String(i + 1).padStart(2, '0'));
Â  return barajas.sort(() => Math.random() - 0.5);
}

io.on('connection', (socket) => {
Â  console.log(`Jugador conectado: ${socket.id}`);

Â  socket.on('unirse-sala', ({ sala, nickname }) => {
Â  Â  socket.join(sala);

Â  Â  if (!salas[sala]) {
Â  Â  Â  salas[sala] = {
Â  Â  Â  Â  jugadores: {},
Â  Â  Â  Â  hostId: null,
Â  Â  Â  Â  historial: [],
Â  Â  Â  Â  barajitas: [],
Â  Â  Â  Â  barajeoEnCurso: false,
Â  Â  Â  Â  intervalo: null,
Â  Â  Â  Â  juegoPausado: false,
Â  Â  Â  Â  bote: 0
Â  Â  Â  };
Â  Â  }

Â  Â  const esHostCustom = nickname.toLowerCase() === `host ${sala.toLowerCase()}`;
Â  Â  if (esHostCustom || !salas[sala].hostId) {
Â  Â  Â  salas[sala].hostId = socket.id;
Â  Â  }

Â  Â  const esHost = socket.id === salas[sala].hostId;
Â  Â  salas[sala].jugadores[socket.id] = { 
Â  Â  Â  nickname, 
Â  Â  Â  host: esHost,
Â  Â  Â  monedas: 30,
Â  Â  Â  apostado: false,
Â  Â  Â  cartasSeleccionadas: [] // <-- Se inicializa el array para cada jugador
Â  Â  };

Â  Â  // Recopilar todas las cartas seleccionadas de todos los jugadores para desactivarlas
Â  Â  let cartasTotalesSeleccionadas = new Set();
Â  Â  for (const id in salas[sala].jugadores) {
Â  Â  Â  salas[sala].jugadores[id].cartasSeleccionadas.forEach(c => cartasTotalesSeleccionadas.add(c));
Â  Â  }

Â  Â  socket.emit('rol-asignado', { host: esHost });
Â  Â  io.to(sala).emit('cartas-desactivadas', Array.from(cartasTotalesSeleccionadas));
Â  Â  socket.emit('historial-actualizado', salas[sala].historial);
Â  Â  io.to(sala).emit('jugadores-actualizados', salas[sala].jugadores);
Â  Â  io.to(sala).emit('bote-actualizado', salas[sala].bote);
Â  });

Â  socket.on('seleccionar-carta', ({ sala, carta }) => {
Â  Â  if (!salas[sala]) return;
Â  Â  const jugador = salas[sala].jugadores[socket.id];
Â  Â  if (jugador && !jugador.cartasSeleccionadas.includes(carta)) {
Â  Â  Â  jugador.cartasSeleccionadas.push(carta);
Â  Â  }

Â  Â  let cartasTotalesSeleccionadas = new Set();
Â  Â  for (const id in salas[sala].jugadores) {
Â  Â  Â  salas[sala].jugadores[id].cartasSeleccionadas.forEach(c => cartasTotalesSeleccionadas.add(c));
Â  Â  }
Â  Â  io.to(sala).emit('cartas-desactivadas', Array.from(cartasTotalesSeleccionadas));
Â  });

Â  socket.on('barajear', (sala) => {
Â  Â  if (!salas[sala]) return;
Â  Â  salas[sala].historial = [];
Â  Â  salas[sala].barajitas = generarBarajitas();
Â  Â  salas[sala].juegoPausado = false;
Â  Â  io.to(sala).emit('barajear');
Â  });

Â  socket.on('iniciar-juego', (sala) => {
Â  Â  const data = salas[sala];
Â  Â  if (!data || data.barajeoEnCurso || data.juegoPausado) return;

Â  Â  if (data.barajitas.length === 0) {
Â  Â  Â  data.barajitas = generarBarajitas();
Â  Â  }

Â  Â  io.to(sala).emit('campana');

Â  Â  setTimeout(() => {
Â  Â  Â  io.to(sala).emit('corre');
Â  Â  Â  let index = 0;
Â  Â  Â  data.barajeoEnCurso = true;

Â  Â  Â  data.intervalo = setInterval(() => {
Â  Â  Â  Â  if (data.juegoPausado) return;

Â  Â  Â  Â  if (index >= data.barajitas.length) {
Â  Â  Â  Â  Â  clearInterval(data.intervalo);
Â  Â  Â  Â  Â  data.barajeoEnCurso = false;
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  const carta = data.barajitas[index];
Â  Â  Â  Â  data.historial.push(carta);
Â  Â  Â  Â  io.to(sala).emit('carta-cantada', carta);
Â  Â  Â  Â  index++;
Â  Â  Â  }, 4000);
Â  Â  }, 2000);
Â  });

Â  socket.on('detener-juego', (sala) => {
Â  Â  if (!salas[sala]) return;
Â  Â  clearInterval(salas[sala].intervalo);
Â  Â  salas[sala].barajeoEnCurso = false;
Â  Â  salas[sala].juegoPausado = false;
Â  Â  io.to(sala).emit('juego-detenido');
Â  });

Â  socket.on('loteria', ({ sala, nickname }) => {
Â  Â  const data = salas[sala];
Â  Â  if (!data) return;

Â  Â  data.juegoPausado = true;
Â  Â  clearInterval(data.intervalo);
Â  Â  data.barajeoEnCurso = false;

Â  Â  io.to(sala).emit('loteria-anunciada', nickname);
Â  });

Â  socket.on('confirmar-ganador', ({ sala, ganadorId }) => {
Â  Â  const data = salas[sala];
Â  Â  if (!data || !data.jugadores[ganadorId]) {
Â  Â  Â  return;
Â  Â  }

Â  Â  const ganador = data.jugadores[ganadorId];
Â  Â  ganador.monedas += data.bote;
Â  Â  data.bote = 0;

Â  Â  for (const id in data.jugadores) {
Â  Â  Â  data.jugadores[id].apostado = false;
Â  Â  }

Â  Â  io.to(sala).emit('jugadores-actualizados', data.jugadores);
Â  Â  io.to(sala).emit('bote-actualizado', 0);
Â  Â  io.to(sala).emit('juego-detenido');
Â  });

Â  socket.on('apostar', ({ sala, cantidad }) => {
Â  Â  const data = salas[sala];
Â  Â  if (!data) return;

Â  Â  const jugador = data.jugadores[socket.id];
Â  Â  if (!jugador || jugador.apostado) {
Â  Â  Â  socket.emit('error-apuesta', 'Ya apostaste en esta ronda.');
Â  Â  Â  return;
Â  Â  }

Â  Â  if (jugador.cartasSeleccionadas.length === 0) {
Â  Â  Â  socket.emit('error-apuesta', 'No puedes apostar sin tener cartas seleccionadas.');
Â  Â  Â  return;
Â  Â  }

Â  Â  if (jugador.monedas >= cantidad) {
Â  Â  Â  jugador.monedas -= cantidad;
Â  Â  Â  data.bote += cantidad;
Â  Â  Â  jugador.apostado = true;

Â  Â  Â  io.to(sala).emit('jugadores-actualizados', data.jugadores);
Â  Â  Â  io.to(sala).emit('bote-actualizado', data.bote);
Â  Â  } else {
Â  Â  Â  socket.emit('error-apuesta', 'No tienes suficientes monedas para apostar.');
Â  Â  }
Â  });

Â  socket.on('reiniciar-partida', (sala) => {
Â  Â  if (!salas[sala]) return;
Â  Â  salas[sala].historial = [];
Â  Â  salas[sala].barajitas = [];
Â  Â  salas[sala].barajeoEnCurso = false;
Â  Â  salas[sala].juegoPausado = false;
Â  Â  salas[sala].bote = 0;

Â  Â  for (const id in salas[sala].jugadores) {
Â  Â  Â  salas[sala].jugadores[id].apostado = false;
Â  Â  Â  salas[sala].jugadores[id].cartasSeleccionadas = []; // Reiniciar cartas seleccionadas de cada jugador
Â  Â  }

Â  Â  io.to(sala).emit('partida-reiniciada');
Â  Â  io.to(sala).emit('bote-actualizado', 0);
Â  Â  io.to(sala).emit('cartas-desactivadas', []);
Â  });

Â  socket.on('disconnecting', () => {
Â  Â  const salasUsuario = Array.from(socket.rooms).filter(s => s !== socket.id);
Â  Â  salasUsuario.forEach(sala => {
Â  Â  Â  const data = salas[sala];
Â  Â  Â  if (!data || !data.jugadores[socket.id]) return;

Â  Â  Â  delete data.jugadores[socket.id];
Â  Â  Â  if (socket.id === data.hostId) {
Â  Â  Â  Â  const nuevosJugadores = Object.keys(data.jugadores);
Â  Â  Â  Â  data.hostId = nuevosJugadores[0] || null;
Â  Â  Â  Â  if (data.hostId) {
Â  Â  Â  Â  Â  data.jugadores[data.hostId].host = true;
Â  Â  Â  Â  }
Â  Â  Â  }

Â  Â  Â  io.to(sala).emit('jugadores-actualizados', data.jugadores);
Â  Â  });
Â  });

Â  socket.on('disconnect', () => {
Â  Â  console.log(`Jugador desconectado: ${socket.id}`);
Â  });
});

app.use(cors());

app.get('/', (req, res) => {
Â  res.send('ðŸŽ¯ Servidor de LoterÃ­a funcionando con mÃºltiples salas + apuestas');
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
Â  console.log(`Servidor corriendo en el puerto ${PORT}`);
});
